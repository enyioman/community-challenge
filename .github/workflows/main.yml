name: Deploy to Amazon ECS
on:
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: HostspaceCluster
  ECR_REPOSITORY_FRONTEND: frontend
  ECR_REPOSITORY_BACKEND: backend  
  CONTAINER_NAME_FRONTEND: frontend
  CONTAINER_NAME_BACKEND: backend
  ECS_SERVICE: HostSpaceClusterService
  ECS_TASKDEFINITION: .github/workflows/taskdef.json

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: "Terraform Plan"
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        id: init
        run: terraform init
        working-directory: ./Terraform
      
      - name: Terraform Validate
        id: validate
        run: terraform validate
        working-directory: ./Terraform

      - name: Terraform Plan
        id: plan
        run: terraform plan
        working-directory: ./Terraform
        continue-on-error: true

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      
      - name: Terraform Apply
        env:
          TERRAFORM_CLOUD_TOKENS: ${{ secrets.HOSTNAME }}=${{ secrets.TOKEN }}
        uses: dflook/terraform-apply@v1
        with:
          path: ./Terraform
          auto_approve: true
          output: "cluster_name"

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: "335081657283.dkr.ecr.us-east-1.amazonaws.com"
          IMAGE_TAG: hostspace
        run: |
          docker compose build
          
          echo "$(docker images)"

          docker tag community-challenge-vue-frontend:latest $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          echo "::set-output name=frontend-image::$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

          docker tag community-challenge-flask-backend:latest $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          echo "::set-output name=backend-image::$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-frontend
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASKDEFINITION }}
          container-name: ${{ env.CONTAINER_NAME_FRONTEND }}
          image: ${{ steps.build-image.outputs.frontend-image }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-backend
        uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
        with:
          task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_BACKEND }}
          image: ${{ steps.build-image.outputs.backend-image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-backend.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true